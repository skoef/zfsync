#!/bin/sh

if [ -z "${LIB_COMMON_INCLUDED}" ]; then
LIB_COMMON_INCLUDED=1

zf_usage() {
    local msg=$1
    [ ! -z "${msg}" ] && echo "Error: ${msg}" >&2
    cat >&2 << EOT
Usage: zfsync [-dhimMPq] [-U target_user] [-I identity_file] [-k retention]
              [-K retention] -H target_host -T target_zfs
              source_zfs

    source_zfs is the filesystem that should be synced to a remote host

Options:
    -d                   enable debugging (negates -q)
    -h                   show you this help page
    -H target_host       host to send snapshots to [required]
    -i                   send incremental stream between local and remote
                         snapshot instead of a stream package of all
                         intermediary snapshots
    -I identity_file     use this key for authentication
    -k local_retention   after synchronizing, apply local retention
    -K remote_retention  after synchronizing, apply remote retention
    -m                   only show matching snapshots and exit (mutually
                         exclusive with -M)
    -M                   only show missing snapshots and exit (mutually
                         exclusive with -m)
    -P                   do not set user properties on remote end
    -q                   be more quiet
    -T target_zfs        ZFS on target host to send snapshots to [required]
    -U target_user       alternative user to authenticate as on remote host

EOT
    [ ! -z "${msg}" ] && exit 1
}

zf_debug() {
    [ ${ZF_DEBUG} -eq 1 ] && \
        printf "[%s] Debug: %s\n" "$(date)" "${@}" >&2
    return 0
}

zf_warn() {
    printf "[%s] Warning: %s\n" "$(date)" "${@}" >&2
}

zf_error() {
    printf "[%s] Error: %s\n" "$(date)" "${@}" >&2
    exit 1
}

zf_msg(){
    [ ${ZF_SILENT} -eq 0 -o ${ZF_DEBUG} -eq 1 ] && \
        printf "[%s] %s\n" "$(date)" "${@}" >&2
    return 0
}

zf_has_binary() {
    local bin=$1 path
    path=$(which ${bin} 2>/dev/null)

    if [ -z "${path}" ] || [ ! -x ${path} ]; then
        zf_debug "${bin} not found in PATH"
        return 1
    fi

    zf_debug "${bin} found in PATH"
}

fi
