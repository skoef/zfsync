#!/bin/sh

# XXX: ideas:
# - compression
# - custom zfsync zfs properties
# - check for large_blocks and use it if present

# halt on error
set -e
# get rid of locale
unset LC_ALL
unset LANG
# force PATH
PATH=${PATH}:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin

if [ -f "./lib/common" ]; then
    LIB="./lib"
elif [ -d "/usr/local/lib/zfsync" ]; then
    LIB="/usr/local/lib/zfsync"
else
    echo "ERROR: required libraries not found"
    exit 1
fi

. "${LIB}/common"
. "${LIB}/ssh"
. "${LIB}/zfs"
. "${LIB}/zpool"

# parse command line
if [ $# -eq 0 ]; then
    zf_usage
    exit 1
fi

# set some defaults
ZF_DEBUG=0
ZF_SILENT=0
ZF_INCREMENTAL=0
ZF_LARGE_BLOCKS=0
ZF_SET_PROPERTIES=1
ZF_MATCHING_SNAPSHOTS=0
ZF_MISSING_SNAPSHOTS=0

while getopts 'dhH:iI:mMPqT:U:' opt; do
    case ${opt} in
        d) ZF_DEBUG=1;;
        h)
            zf_usage
            exit 0
            ;;
        H) ZF_TARGET_HOST=${OPTARG};;
        i) ZF_INCREMENTAL=1;;
        I) ZF_IDENTITY_FILE=${OPTARG};;
        m) ZF_MATCHING_SNAPSHOTS=1;;
        M) ZF_MISSING_SNAPSHOTS=1;;
        P) ZF_SET_PROPERTIES=0;;
        q) ZF_SILENT=1;;
        T) ZF_TARGET_ZFS=${OPTARG%/};;
        U) ZF_TARGET_USER=${OPTARG};;
        ?)
            zf_usage
            exit 1
            ;;
    esac
done
shift "$((OPTIND - 1))"

ZF_SOURCE_ZFS=${1%/}

# defaults and parameter checking
[ -z "${ZF_TARGET_USER}" ] && ZF_TARGET_USER="${USER}"
[ -z "${ZF_TARGET_HOST}" ] && zf_usage "no target ZFS specified"
[ -z "${ZF_SOURCE_ZFS}" ] && zf_usage "no source ZFS specified"
[ ${ZF_MATCHING_SNAPSHOTS} -eq 1 -a ${ZF_MISSING_SNAPSHOTS} -eq 1 ] && zf_usage "can't use -m and -M together"

[ ${ZF_MATCHING_SNAPSHOTS} -eq 1 ] && zf_msg "Listing common snapshots between ${ZF_SOURCE_ZFS} and ${ZF_TARGET_ZFS}"
[ ${ZF_MISSING_SNAPSHOTS} -eq 1 ] && zf_msg "Listing missing snapshots between ${ZF_SOURCE_ZFS} and ${ZF_TARGET_ZFS}"

source_properties="hold,send"
target_properties="receive,create,mount"
if [ ${ZF_SET_PROPERTIES} -eq 1 ]; then
    target_properties="${target_properties},userprop"
fi

# determine if we can use -L during sending
if [ ${ZF_MATCHING_SNAPSHOTS} -eq 0 -a ${ZF_MISSING_SNAPSHOTS} -eq 0 ] && \
    zf_zpool_has_feature "large_blocks" && \
    zf_zpool_has_feature "large_blocks" 1; then
    zf_msg "Using large blocks while sending"
    ZF_LARGE_BLOCKS=1
fi

# sanity check
zf_msg "Checking source and target"
if ! zf_zfs_exists "${ZF_SOURCE_ZFS}"; then
    zf_error "source ZFS ${ZF_SOURCE_ZFS} not found"
fi

if ! zf_zfs_exists "${ZF_TARGET_ZFS}" 1; then
    zf_error "target ZFS ${ZF_TARGET_USER} not found"
fi

# instead of using replication streams
# we break recursive sends into individual filesystems
# so we can control and report on each filesystem
# more effectively
zf_zfs_has_childfs ${ZF_SOURCE_ZFS} && recursive_send=1 || recursive_send=0

if [ ${recursive_send} -eq 1 ] && [ ${ZF_MATCHING_SNAPSHOTS} -eq 1 -o ${ZF_MISSING_SNAPSHOTS} -eq 1 ]; then
    zf_error "can't compare snapshots of filesystems with childs"
fi

for filesystem in $(zf_zfs_get_recursive ${ZF_SOURCE_ZFS}); do
    if [ ${recursive_send} -eq 1 ]; then
        suffix=$(echo ${filesystem} | sed "s#^${ZF_SOURCE_ZFS}##")
        target="${ZF_TARGET_ZFS}${suffix}"
    else
        target=${ZF_TARGET_ZFS}
    fi

    # if only looking for matching snapshots, show them now
    if [ ${ZF_MATCHING_SNAPSHOTS} -eq 1 ]; then
        snapshots=$(zf_zfs_matching_snapshots ${ZF_SOURCE_ZFS} ${ZF_TARGET_ZFS})
        if [ -z "${snapshots}" ]; then
            zf_error "no matching snapshots found between ${ZF_SOURCE_ZFS} and ${ZF_TARGET_ZFS}"
        fi

        echo $snapshots | xargs -n 1 echo
        exit
    fi

    # if only looking for missing snapshots, show them now
    if [ ${ZF_MISSING_SNAPSHOTS} -eq 1 ]; then
        snapshots=$(zf_zfs_missing_snapshots ${ZF_SOURCE_ZFS} ${ZF_TARGET_ZFS})
        if [ -z "${snapshots}" ]; then
            zf_error "no missing snapshots found between ${ZF_SOURCE_ZFS} and ${ZF_TARGET_ZFS}"
        fi

        echo $snapshots | xargs -n 1 echo
        exit
    fi


    # permissions check
    zf_msg "Checking permissions on source and target"
    if ! zf_zfs_is_user_allowed "${USER}" "${source_properties}" "${filesystem}"; then
       zf_error "required local permissions for ${USER} on ${filesystem} not met: ${source_properties}"
    fi

    # TODO: what if the other side is not mounted
    # TODO: if recursive, check childfs remotely as well
    if ! zf_zfs_is_user_allowed "${ZF_TARGET_USER}" "${target_properties}" "${ZF_TARGET_ZFS}" 1; then
       zf_error "required remote permissions for ${ZF_TARGET_USER} on ${ZF_TARGET_ZFS} not met: ${target_properties}"
    fi

    # look for matching snapshots
    if ! zf_zfs_has_matching_snapshots "${filesystem}" "${target}"; then
        zf_warn "no matching snapshots between source and target"
        oldest_snapshot=$(zf_zfs_snapshots "${filesystem}" | head -1)
        # get oldest source snapshot for initial sync
        if [ -z "${oldest_snapshot}" ]; then
            if [ ${recursive_send} -eq 1 ]; then
                zf_msg "Source ${filesystem} has no snapshots"
                continue
            fi

            zf_error "source ${filesystem} has no snapshots"
        fi

        # perform initial sync
        zf_msg "Sending initial snapshot ${oldest_snapshot}"
        if ! zf_zfs_sync "${filesystem}${oldest_snapshot}" "${target}"; then
            [ ${recursive_send} -eq 0 ] && zf_error "failed sending initial snapshot ${filesystem}"
            zf_warn "failed sending initial snapshot ${filesystem}"
            continue
        fi

        zf_msg "Checking both sides again for matches"
    fi

    # perform incremental sync
    latest_match=$(zf_zfs_matching_snapshots "${filesystem}" "${target}" | tail -1)
    if [ -z "${latest_match}" ]; then
        zf_error "no matches found between ${filesystem} and ${target}"
    fi

    zf_debug "found matching snapshot ${latest_match}"
    latest_snapshot=$(zf_zfs_snapshots "${filesystem}" | tail -1)
    if [ "${latest_match}" = "${latest_snapshot}" ]; then
        zf_msg "Both ends are in sync for ${filesystem}"
        continue
    fi

    zf_msg "Sending incremental from ${latest_match} to ${latest_snapshot}"
    [ ${ZF_INCREMENTAL} -eq 1 ] && cmd_inc="-i" || cmd_inc="-I"
    if ! zf_zfs_sync "${filesystem}${latest_snapshot}" "${target}" "${cmd_inc} ${latest_match}"; then
        [ ${recursive_send} -eq 0 ] && zf_error "failed sending ${filesystem} incrementally from ${latest_snapshot}"
        zf_warn "failed sending ${filesystem} incrementally from ${latest_snapshot}"
        continue
    fi
done

zf_msg "Done"
