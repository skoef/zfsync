#!/bin/sh

# XXX: ideas:
# - compression
# - custom zfsync zfs properties

# halt on error
set -e
# get rid of locale
unset LC_ALL
unset LANG
# force PATH
PATH=${PATH}:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin

# allow libraries to be found relative to
# current working directory for developing
if [ -f "./lib/common" ]; then
    LIB="./lib"
elif [ -d "/usr/local/lib/zfsync" ]; then
    LIB="/usr/local/lib/zfsync"
else
    echo "ERROR: required libraries not found"
    exit 1
fi

# include libraries
. "${LIB}/common"
. "${LIB}/mbuffer"
. "${LIB}/ssh"
. "${LIB}/zfs"
. "${LIB}/zpool"

# parse command line
if [ $# -eq 0 ]; then
    zf_usage
    exit 1
fi

# set some defaults
ZF_DEBUG=0
ZF_SILENT=0
ZF_INCREMENTAL=0
ZF_LARGE_BLOCKS=0
ZF_SET_PROPERTIES=1
ZF_HAS_MBUFFER=0
ZF_BUFFER=1
ZF_LOCAL_RETENTION=
ZF_REMOTE_RETENTION=

# set defaults, only to be overriden
# by configuration file
ZF_MBUFFER_SIZE="1G"
ZF_MBUFFER_FORCE_REMOTE=

while getopts 'dBf:hH:iI:k:K:PqT:U:' opt; do
    case ${opt} in
        d) ZF_DEBUG=1;;
        B) ZF_BUFFER=0;;
        f) ZF_CONFIG_FILE=${OPTARG};;
        h)
            zf_usage
            exit 0
            ;;
        H) ZF_TARGET_HOST=${OPTARG};;
        i) ZF_INCREMENTAL=1;;
        I) ZF_IDENTITY_FILE=${OPTARG};;
        k) ZF_LOCAL_RETENTION=${OPTARG};;
        K) ZF_REMOTE_RETENTION=${OPTARG};;
        P) ZF_SET_PROPERTIES=0;;
        q) ZF_SILENT=1;;
        T) ZF_TARGET_ZFS=${OPTARG%/};;
        U) ZF_TARGET_USER=${OPTARG};;
        ?)
            zf_usage
            exit 1
            ;;
    esac
done
shift "$((OPTIND - 1))"

ZF_SOURCE_ZFS=${1%/}

# source configuration file
if [ ! -z "${ZF_CONFIG_FILE}" ]; then
    [ ! -f "${ZF_CONFIG_FILE}" ] && zf_error "configuration file ${ZF_CONFIG_FILE} not found"
    [ ! -r "${ZF_CONFIG_FILE}" ] && zf_error "configuration file ${ZF_CONFIG_FILE} not readable"

    . ${ZF_CONFIG_FILE}
fi

# defaults and parameter checking
[ -z "${ZF_TARGET_USER}" ] && ZF_TARGET_USER="${USER}"
[ -z "${ZF_TARGET_HOST}" ] && zf_usage "no target host specified"
[ -z "${ZF_TARGET_ZFS}" ] && zf_usage "no target ZFS specified"
[ -z "${ZF_SOURCE_ZFS}" ] && zf_usage "no source ZFS specified"

# determine if we can use -L during sending
if zf_zpool_has_feature ${ZF_SOURCE_ZFS%%/*} "large_blocks" && \
    zf_zpool_has_feature ${ZF_TARGET_ZFS%%/*} "large_blocks" 1; then
    zf_msg "Using large blocks while sending"
    ZF_LARGE_BLOCKS=1
fi

# determine if mbuffer is available
if [ ${ZF_BUFFER} -eq 1 ]; then
    if zf_has_binary mbuffer; then
        zf_msg "Buffering streams with mbuffer"
        ZF_HAS_MBUFFER=1
    fi
else
    zf_debug "buffering disabled by user"
fi

# sanity check
zf_msg "Checking source and target"
if ! zf_zfs_exists "${ZF_SOURCE_ZFS}"; then
    zf_error "source ZFS ${ZF_SOURCE_ZFS} not found"
fi

if ! zf_zfs_exists "${ZF_TARGET_ZFS}" 1; then
    zf_error "target ZFS ${ZF_TARGET_ZFS} not found"
fi

# instead of using replication streams
# we break recursive sends into individual filesystems
# so we can control and report on each filesystem
# more effectively
zf_zfs_has_childfs ${ZF_SOURCE_ZFS} && recursive_send=1 || recursive_send=0

for filesystem in $(zf_zfs_get_recursive ${ZF_SOURCE_ZFS}); do
    if [ ${recursive_send} -eq 1 ]; then
        suffix=$(echo ${filesystem} | sed "s#^${ZF_SOURCE_ZFS}##")
        target="${ZF_TARGET_ZFS}${suffix}"
    else
        target=${ZF_TARGET_ZFS}
    fi

    # local permissions check
    zf_msg "Checking permissions on source and target"
    source_properties="hold,send"
    if ! zf_zfs_is_user_allowed "${USER}" "${source_properties}" "${filesystem}"; then
       zf_error "required local permissions for ${USER} on ${filesystem} not met: ${source_properties}"
    fi

    # remote permissions check
    # TODO: what if the other side is not mounted
    # TODO: if recursive, check childfs remotely as well
    target_properties="receive,create,mount"
    if ! zf_zfs_is_user_allowed "${ZF_TARGET_USER}" "${target_properties}" "${ZF_TARGET_ZFS}" 1; then
       zf_error "required remote permissions for ${ZF_TARGET_USER} on ${ZF_TARGET_ZFS} not met: ${target_properties}"
    fi

    if [ ${ZF_SET_PROPERTIES} -eq 1 ] && ! zf_zfs_is_user_allowed "${ZF_TARGET_USER}" "userprop" "${ZF_TARGET_ZFS}" 1; then
        zf_warn "user ${ZF_TARGET_USER} lacks 'userprop' permission on ${ZF_TARGET_ZFS}, implying -P"
        ZF_SET_PROPERTIES=0
    fi

    zf_msg "Looking for matching snapshots between ${filesystem} and ${target}"
    matches=$(zf_zfs_matching_snapshots "${filesystem}" "${target}")
    # look for matching snapshots
    if [ -z "${matches}" ]; then
        zf_warn "no matching snapshots between source and target"
        oldest_snapshot=$(zf_zfs_snapshots "${filesystem}" | head -1)
        # get oldest source snapshot for initial sync
        if [ -z "${oldest_snapshot}" ]; then
            if [ ${recursive_send} -eq 1 ]; then
                zf_msg "Source ${filesystem} has no snapshots"
                continue
            fi

            zf_error "source ${filesystem} has no snapshots"
        fi

        # perform initial sync
        zf_msg "Sending initial snapshot ${oldest_snapshot}"
        if ! zf_zfs_sync "${filesystem}${oldest_snapshot}" "${target}"; then
            [ ${recursive_send} -eq 0 ] && zf_error "failed sending initial snapshot ${filesystem}"
            zf_warn "failed sending initial snapshot ${filesystem}"
            continue
        fi

        zf_msg "Proceeding sending incremental update for ${filesystem}"
        latest_match=$oldest_snapshot
    else
        latest_match=$(echo ${matches} | awk '{print $NF}')
    fi

    # perform incremental sync
    zf_debug "latest matching snapshot found: ${latest_match}"
    latest_snapshot=$(zf_zfs_snapshots "${filesystem}" | tail -1)
    # latest snapshots on both sides don't match
    if [ "${latest_match}" != "${latest_snapshot}" ]; then
        zf_msg "Sending incremental from ${latest_match} to ${latest_snapshot}"
        [ ${ZF_INCREMENTAL} -eq 1 ] && cmd_inc="-i" || cmd_inc="-I"
        if ! zf_zfs_sync "${filesystem}${latest_snapshot}" "${target}" "${cmd_inc} ${latest_match}"; then
            [ ${recursive_send} -eq 0 ] && zf_error "failed sending ${filesystem} incrementally from ${latest_snapshot}"
            zf_warn "failed sending ${filesystem} incrementally from ${latest_snapshot}"
            continue
        fi
    fi
    zf_msg "Both ends are in sync for ${filesystem}"

    if [ ! -z "${ZF_LOCAL_RETENTION}" -o ! -z "${ZF_REMOTE_RETENTION}" ]; then
        last_match=$(zf_zfs_matching_snapshots ${filesystem} ${target} | tail -1)
        [ ! -z "${ZF_LOCAL_RETENTION}" ] && zf_zfs_apply_retention ${filesystem} ${ZF_LOCAL_RETENTION} ${last_match} ${USER}
        [ ! -z "${ZF_REMOTE_RETENTION}" ] && zf_zfs_apply_retention ${target} ${ZF_REMOTE_RETENTION} ${last_match} ${ZF_TARGET_USER} 1
    fi
done

zf_msg "Done"
